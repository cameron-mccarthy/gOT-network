import { Injectable } from '@angular/core';
import { Vulnerability } from '../interfaces/vulnerability';
import { BehaviorSubject, Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class VulnerabilityService{
  url: string = 'http://localhost:5000/';

  private vulnSubject = new BehaviorSubject<Vulnerability[]>([]);
  public vulnList: Observable<Vulnerability[]> = this.vulnSubject.asObservable();
  
  constructor(private http: HttpClient) {
    this.loadVulnerabilities();
  }

  refresh() {
    this.loadVulnerabilities();
  }
    
  private loadVulnerabilities() {
    const url = this.url + 'pntVulns';
    this.http.get<Vulnerability[]>(url)
      .subscribe(devices => {this.vulnSubject.next(devices);});
  }

  addAlert(newAlert: Vulnerability) {
    const url = this.url + 'addVuln';
    this.http.post(url, newAlert).subscribe(() => {this.loadVulnerabilities()}, error => {alert(error.error)})
  }

  deleteAlert(deleteAlert: Vulnerability) {
    const url = this.url + 'delVuln';
    this.http.post(url, deleteAlert).subscribe(() => {this.loadVulnerabilities()}, error => {alert(error.error)} )
  }

  editAlert(newAlert: Vulnerability) {
    const url = this.url + 'editVuln';
    this.http.post(url, newAlert).subscribe(() => {this.loadVulnerabilities()}, error => {alert(error.error)})
  }
}